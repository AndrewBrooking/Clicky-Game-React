{"version":3,"sources":["components/Jumbotron/index.js","components/Game/index.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","className","score","highScore","Game","characters","map","char","key","id","style","width","height","src","image","onClick","charClicked","alt","App","state","Characters","clicked","increaseScore","console","log","randomizeCharacters","temp","randIndex","array","index","length","Math","floor","random","includes","reset","push","setState","render","React","Component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"o/EAuBeA,MApBf,SAAmBC,GACf,OACI,yBAAKC,UAAU,oDACX,wBAAIA,UAAU,aAAd,eAEA,wBAAIA,UAAU,cAEd,sIAIA,6BAEA,wCACYD,EAAME,MADlB,kBACwCF,EAAMG,aCG3CC,MAlBf,SAAcJ,GACV,OACI,yBAAKC,UAAU,yDACX,yBAAKA,UAAU,iBACVD,EAAMK,WAAWC,KAAI,SAACC,GACnB,OACA,yBAAKN,UAAU,MAAMO,IAAKD,EAAKE,IAC3B,yBAAKR,UAAU,mBAAmBS,MAAO,CAACC,MAAO,IAAKC,OAAQ,MAC1D,yBAAKC,IAAKN,EAAKO,MAAOb,UAAU,eAAec,QAAS,kBAAMf,EAAMgB,YAAYT,EAAKE,KAAKQ,IAAI,a,OCyE3GC,E,2MA3EbC,MAAQ,CACNjB,MAAO,EACPC,UAAW,EACXE,WAAYe,EACZC,QAAS,I,EAGXC,cAAgB,WACd,IAAIpB,EAAQ,EAAKiB,MAAMjB,MAAQ,EAC3BC,EAAY,EAAKgB,MAAMhB,UAQ3B,OANID,EAAQC,IACVA,EAAYD,GAGdqB,QAAQC,IAAItB,EAAOC,GAEZ,CAACD,QAAOC,c,EAGjBsB,oBAAsB,WAKpB,IAJA,IAEIC,EAAMC,EAFNC,EAAK,YAAO,EAAKT,MAAMd,YACvBwB,EAAQ,EAAKV,MAAMd,WAAWyB,OAGjB,IAAVD,GACLF,EAAYI,KAAKC,MAAMD,KAAKE,SAAWJ,GAGvCH,EAAOE,IAFPC,GAGAD,EAAMC,GAASD,EAAMD,GACrBC,EAAMD,GAAaD,EAGrB,OAAOE,G,EAGTZ,YAAc,SAACP,GACb,GAAI,EAAKU,MAAME,QAAQa,SAASzB,GAC9B,EAAK0B,YACA,CACL,IAAMd,EAAO,YAAO,EAAKF,MAAME,SAC/BA,EAAQe,KAAK3B,GAFR,MAIsB,EAAKa,gBAAzBpB,EAJF,EAIEA,MAAOC,EAJT,EAISA,UACRE,EAAa,EAAKoB,sBAExB,EAAKY,SAAS,CACZnC,QACAC,YACAE,aACAgB,c,EAKNc,MAAQ,WACN,EAAKE,SAAS,CACZnC,MAAO,EACPC,UAAW,EAAKgB,MAAMhB,UACtBE,WAAYe,EACZC,QAAS,M,EAIbiB,OAAS,WACP,OACE,yBAAKrC,UAAU,mBACb,kBAAC,EAAD,CAAWC,MAAO,EAAKiB,MAAMjB,MAAOC,UAAW,EAAKgB,MAAMhB,YAC1D,kBAAC,EAAD,CAAME,WAAY,EAAKc,MAAMd,WAAYW,YAAa,EAAKA,gB,6BAvEjDuB,IAAMC,WCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.0c8edabc.chunk.js","sourcesContent":["import React from 'react';\r\nimport './style.css';\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className=\"jumbotron text-center bg-primary text-white pb-4\">\r\n            <h1 className=\"display-2\">Clicky Game</h1>\r\n\r\n            <hr className=\"my-4 mx-4\" />\r\n\r\n            <p>\r\n                Click on one of the images below to increase your score. Be careful though, don't click an image twice.\r\n            </p>\r\n\r\n            <br />\r\n\r\n            <span>\r\n                Score: {props.score} | High Score: {props.highScore}\r\n            </span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React from 'react';\r\n\r\nfunction Game(props) {\r\n    return (\r\n        <div className=\"card border rounded shadow bg-white w-75 mx-auto my-3\">\r\n            <div className=\"card-body row\">\r\n                {props.characters.map((char) => {\r\n                    return (\r\n                    <div className=\"col\" key={char.id}>\r\n                        <div className=\"card shadow my-3\" style={{width: 124, height: 114}}>\r\n                            <img src={char.image} className=\"card-img-top\" onClick={() => props.charClicked(char.id)} alt=\"\" />\r\n                        </div>\r\n                    </div>\r\n                    )\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","import React from 'react';\nimport './App.css';\nimport Jumbotron from './components/Jumbotron/index';\nimport Game from './components/Game/index';\nimport Characters from './images.json';\n\nclass App extends React.Component {\n\n  state = {\n    score: 0,\n    highScore: 0,\n    characters: Characters,\n    clicked: []\n  };\n\n  increaseScore = () => {\n    let score = this.state.score + 1;\n    let highScore = this.state.highScore;\n\n    if (score > highScore) {\n      highScore = score;\n    }\n\n    console.log(score, highScore);\n\n    return {score, highScore};\n  }\n\n  randomizeCharacters = () => {\n    let array = [...this.state.characters]\n    let index = this.state.characters.length;\n    let temp, randIndex;\n\n    while (index !== 0) {\n      randIndex = Math.floor(Math.random() * index);\n      index--;\n\n      temp = array[index];\n      array[index] = array[randIndex];\n      array[randIndex] = temp;\n    }\n\n    return array;\n  }\n\n  charClicked = (id) => {\n    if (this.state.clicked.includes(id)) {\n      this.reset();\n    } else {\n      const clicked = [...this.state.clicked];\n      clicked.push(id);\n      \n      const {score, highScore} = this.increaseScore();\n      const characters = this.randomizeCharacters();\n      \n      this.setState({\n        score,\n        highScore,\n        characters,\n        clicked\n      });\n    }\n  }\n\n  reset = () => {\n    this.setState({\n      score: 0,\n      highScore: this.state.highScore,\n      characters: Characters,\n      clicked: []\n    });\n  }\n\n  render = () => {\n    return (\n      <div className=\"container-fluid\">\n        <Jumbotron score={this.state.score} highScore={this.state.highScore} />\n        <Game characters={this.state.characters} charClicked={this.charClicked} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}